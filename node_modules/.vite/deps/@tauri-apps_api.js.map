{
  "version": 3,
  "sources": ["../../@tauri-apps/api/app.js", "../../@tauri-apps/api/mocks.js", "../../@tauri-apps/api/path.js", "../../@tauri-apps/api/tray.js"],
  "sourcesContent": ["import { invoke } from './core.js';\nimport { Image } from './image.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Application metadata and related APIs.\n *\n * @module\n */\n/**\n * Gets the application version.\n * @example\n * ```typescript\n * import { getVersion } from '@tauri-apps/api/app';\n * const appVersion = await getVersion();\n * ```\n *\n * @since 1.0.0\n */\nasync function getVersion() {\n    return invoke('plugin:app|version');\n}\n/**\n * Gets the application name.\n * @example\n * ```typescript\n * import { getName } from '@tauri-apps/api/app';\n * const appName = await getName();\n * ```\n *\n * @since 1.0.0\n */\nasync function getName() {\n    return invoke('plugin:app|name');\n}\n/**\n * Gets the Tauri version.\n *\n * @example\n * ```typescript\n * import { getTauriVersion } from '@tauri-apps/api/app';\n * const tauriVersion = await getTauriVersion();\n * ```\n *\n * @since 1.0.0\n */\nasync function getTauriVersion() {\n    return invoke('plugin:app|tauri_version');\n}\n/**\n * Gets the application identifier.\n * @example\n * ```typescript\n * import { getIdentifier } from '@tauri-apps/api/app';\n * const identifier = await getIdentifier();\n * ```\n *\n * @returns The application identifier as configured in `tauri.conf.json`.\n *\n * @since 2.4.0\n */\nasync function getIdentifier() {\n    return invoke('plugin:app|identifier');\n}\n/**\n * Shows the application on macOS. This function does not automatically focus any specific app window.\n *\n * @example\n * ```typescript\n * import { show } from '@tauri-apps/api/app';\n * await show();\n * ```\n *\n * @since 1.2.0\n */\nasync function show() {\n    return invoke('plugin:app|app_show');\n}\n/**\n * Hides the application on macOS.\n *\n * @example\n * ```typescript\n * import { hide } from '@tauri-apps/api/app';\n * await hide();\n * ```\n *\n * @since 1.2.0\n */\nasync function hide() {\n    return invoke('plugin:app|app_hide');\n}\n/**\n * Fetches the data store identifiers on macOS and iOS.\n *\n * See https://developer.apple.com/documentation/webkit/wkwebsitedatastore for more information.\n *\n * @example\n * ```typescript\n * import { fetchDataStoreIdentifiers } from '@tauri-apps/api/app';\n * const ids = await fetchDataStoreIdentifiers();\n * ```\n *\n * @since 2.4.0\n */\nasync function fetchDataStoreIdentifiers() {\n    return invoke('plugin:app|fetch_data_store_identifiers');\n}\n/**\n * Removes the data store with the given identifier.\n *\n * Note that any webview using this data store should be closed before running this API.\n *\n * See https://developer.apple.com/documentation/webkit/wkwebsitedatastore for more information.\n *\n * @example\n * ```typescript\n * import { fetchDataStoreIdentifiers, removeDataStore } from '@tauri-apps/api/app';\n * for (const id of (await fetchDataStoreIdentifiers())) {\n *  await removeDataStore(id);\n * }\n * ```\n *\n * @since 2.4.0\n */\nasync function removeDataStore(uuid) {\n    return invoke('plugin:app|remove_data_store', { uuid });\n}\n/**\n * Get the default window icon.\n *\n * @example\n * ```typescript\n * import { defaultWindowIcon } from '@tauri-apps/api/app';\n * await defaultWindowIcon();\n * ```\n *\n * @since 2.0.0\n */\nasync function defaultWindowIcon() {\n    return invoke('plugin:app|default_window_icon').then((rid) => rid ? new Image(rid) : null);\n}\n/**\n * Set app's theme, pass in `null` or `undefined` to follow system theme\n *\n * @example\n * ```typescript\n * import { setTheme } from '@tauri-apps/api/app';\n * await setTheme('dark');\n * ```\n *\n * #### Platform-specific\n *\n * - **iOS / Android:** Unsupported.\n *\n * @since 2.0.0\n */\nasync function setTheme(theme) {\n    return invoke('plugin:app|set_app_theme', { theme });\n}\n\nexport { defaultWindowIcon, fetchDataStoreIdentifiers, getIdentifier, getName, getTauriVersion, getVersion, hide, removeDataStore, setTheme, show };\n", "// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\nfunction mockInternals() {\n    var _a;\n    window.__TAURI_INTERNALS__ = (_a = window.__TAURI_INTERNALS__) !== null && _a !== void 0 ? _a : {};\n}\n/**\n * Intercepts all IPC requests with the given mock handler.\n *\n * This function can be used when testing tauri frontend applications or when running the frontend in a Node.js context during static site generation.\n *\n * # Examples\n *\n * Testing setup using Vitest:\n * ```js\n * import { mockIPC, clearMocks } from \"@tauri-apps/api/mocks\"\n * import { invoke } from \"@tauri-apps/api/core\"\n *\n * afterEach(() => {\n *    clearMocks()\n * })\n *\n * test(\"mocked command\", () => {\n *  mockIPC((cmd, payload) => {\n *   switch (cmd) {\n *     case \"add\":\n *       return (payload.a as number) + (payload.b as number);\n *     default:\n *       break;\n *     }\n *  });\n *\n *  expect(invoke('add', { a: 12, b: 15 })).resolves.toBe(27);\n * })\n * ```\n *\n * The callback function can also return a Promise:\n * ```js\n * import { mockIPC, clearMocks } from \"@tauri-apps/api/mocks\"\n * import { invoke } from \"@tauri-apps/api/core\"\n *\n * afterEach(() => {\n *    clearMocks()\n * })\n *\n * test(\"mocked command\", () => {\n *  mockIPC((cmd, payload) => {\n *   if(cmd === \"get_data\") {\n *    return fetch(\"https://example.com/data.json\")\n *      .then((response) => response.json())\n *   }\n *  });\n *\n *  expect(invoke('get_data')).resolves.toBe({ foo: 'bar' });\n * })\n * ```\n *\n * @since 1.0.0\n */\nfunction mockIPC(cb) {\n    mockInternals();\n    window.__TAURI_INTERNALS__.transformCallback = function transformCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback, once = false) {\n        const identifier = window.crypto.getRandomValues(new Uint32Array(1))[0];\n        const prop = `_${identifier}`;\n        Object.defineProperty(window, prop, {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            value: (result) => {\n                if (once) {\n                    Reflect.deleteProperty(window, prop);\n                }\n                return callback && callback(result);\n            },\n            writable: false,\n            configurable: true\n        });\n        return identifier;\n    };\n    // eslint-disable-next-line @typescript-eslint/require-await\n    window.__TAURI_INTERNALS__.invoke = async function (cmd, args, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    options) {\n        return cb(cmd, args);\n    };\n}\n/**\n * Mocks one or many window labels.\n * In non-tauri context it is required to call this function *before* using the `@tauri-apps/api/window` module.\n *\n * This function only mocks the *presence* of windows,\n * window properties (e.g. width and height) can be mocked like regular IPC calls using the `mockIPC` function.\n *\n * # Examples\n *\n * ```js\n * import { mockWindows } from \"@tauri-apps/api/mocks\";\n * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n *\n * mockWindows(\"main\", \"second\", \"third\");\n *\n * const win = getCurrentWindow();\n *\n * win.label // \"main\"\n * ```\n *\n * ```js\n * import { mockWindows } from \"@tauri-apps/api/mocks\";\n *\n * mockWindows(\"main\", \"second\", \"third\");\n *\n * mockIPC((cmd, args) => {\n *  if (cmd === \"plugin:event|emit\") {\n *    console.log('emit event', args?.event, args?.payload);\n *  }\n * });\n *\n * const { emit } = await import(\"@tauri-apps/api/event\");\n * await emit('loaded'); // this will cause the mocked IPC handler to log to the console.\n * ```\n *\n * @param current Label of window this JavaScript context is running in.\n *\n * @since 1.0.0\n */\nfunction mockWindows(current, ..._additionalWindows) {\n    mockInternals();\n    window.__TAURI_INTERNALS__.metadata = {\n        currentWindow: { label: current },\n        currentWebview: { windowLabel: current, label: current }\n    };\n}\n/**\n * Mock `convertFileSrc` function\n *\n *\n * @example\n * ```js\n * import { mockConvertFileSrc } from \"@tauri-apps/api/mocks\";\n * import { convertFileSrc } from \"@tauri-apps/api/core\";\n *\n * mockConvertFileSrc(\"windows\")\n *\n * const url = convertFileSrc(\"C:\\\\Users\\\\user\\\\file.txt\")\n * ```\n *\n * @param osName The operating system to mock, can be one of linux, macos, or windows\n *\n * @since 1.6.0\n */\nfunction mockConvertFileSrc(osName) {\n    mockInternals();\n    window.__TAURI_INTERNALS__.convertFileSrc = function (filePath, protocol = 'asset') {\n        const path = encodeURIComponent(filePath);\n        return osName === 'windows'\n            ? `http://${protocol}.localhost/${path}`\n            : `${protocol}://localhost/${path}`;\n    };\n}\n/**\n * Clears mocked functions/data injected by the other functions in this module.\n * When using a test runner that doesn't provide a fresh window object for each test, calling this function will reset tauri specific properties.\n *\n * # Example\n *\n * ```js\n * import { mockWindows, clearMocks } from \"@tauri-apps/api/mocks\"\n *\n * afterEach(() => {\n *    clearMocks()\n * })\n *\n * test(\"mocked windows\", () => {\n *    mockWindows(\"main\", \"second\", \"third\");\n *\n *    expect(window.__TAURI_INTERNALS__).toHaveProperty(\"metadata\")\n * })\n *\n * test(\"no mocked windows\", () => {\n *    expect(window.__TAURI_INTERNALS__).not.toHaveProperty(\"metadata\")\n * })\n * ```\n *\n * @since 1.0.0\n */\nfunction clearMocks() {\n    var _a, _b, _c;\n    if (typeof window.__TAURI_INTERNALS__ !== 'object') {\n        return;\n    }\n    if ((_a = window.__TAURI_INTERNALS__) === null || _a === void 0 ? void 0 : _a.convertFileSrc)\n        // @ts-expect-error \"The operand of a 'delete' operator must be optional' does not matter in this case\n        delete window.__TAURI_INTERNALS__.convertFileSrc;\n    if ((_b = window.__TAURI_INTERNALS__) === null || _b === void 0 ? void 0 : _b.invoke)\n        // @ts-expect-error \"The operand of a 'delete' operator must be optional' does not matter in this case\n        delete window.__TAURI_INTERNALS__.invoke;\n    if ((_c = window.__TAURI_INTERNALS__) === null || _c === void 0 ? void 0 : _c.metadata)\n        // @ts-expect-error \"The operand of a 'delete' operator must be optional' does not matter in this case\n        delete window.__TAURI_INTERNALS__.metadata;\n}\n\nexport { clearMocks, mockConvertFileSrc, mockIPC, mockWindows };\n", "import { invoke } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * The path module provides utilities for working with file and directory paths.\n *\n * This package is also accessible with `window.__TAURI__.path` when [`app.withGlobalTauri`](https://v2.tauri.app/reference/config/#withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n * @module\n */\n/**\n * @since 2.0.0\n */\nvar BaseDirectory;\n(function (BaseDirectory) {\n    BaseDirectory[BaseDirectory[\"Audio\"] = 1] = \"Audio\";\n    BaseDirectory[BaseDirectory[\"Cache\"] = 2] = \"Cache\";\n    BaseDirectory[BaseDirectory[\"Config\"] = 3] = \"Config\";\n    BaseDirectory[BaseDirectory[\"Data\"] = 4] = \"Data\";\n    BaseDirectory[BaseDirectory[\"LocalData\"] = 5] = \"LocalData\";\n    BaseDirectory[BaseDirectory[\"Document\"] = 6] = \"Document\";\n    BaseDirectory[BaseDirectory[\"Download\"] = 7] = \"Download\";\n    BaseDirectory[BaseDirectory[\"Picture\"] = 8] = \"Picture\";\n    BaseDirectory[BaseDirectory[\"Public\"] = 9] = \"Public\";\n    BaseDirectory[BaseDirectory[\"Video\"] = 10] = \"Video\";\n    BaseDirectory[BaseDirectory[\"Resource\"] = 11] = \"Resource\";\n    BaseDirectory[BaseDirectory[\"Temp\"] = 12] = \"Temp\";\n    BaseDirectory[BaseDirectory[\"AppConfig\"] = 13] = \"AppConfig\";\n    BaseDirectory[BaseDirectory[\"AppData\"] = 14] = \"AppData\";\n    BaseDirectory[BaseDirectory[\"AppLocalData\"] = 15] = \"AppLocalData\";\n    BaseDirectory[BaseDirectory[\"AppCache\"] = 16] = \"AppCache\";\n    BaseDirectory[BaseDirectory[\"AppLog\"] = 17] = \"AppLog\";\n    BaseDirectory[BaseDirectory[\"Desktop\"] = 18] = \"Desktop\";\n    BaseDirectory[BaseDirectory[\"Executable\"] = 19] = \"Executable\";\n    BaseDirectory[BaseDirectory[\"Font\"] = 20] = \"Font\";\n    BaseDirectory[BaseDirectory[\"Home\"] = 21] = \"Home\";\n    BaseDirectory[BaseDirectory[\"Runtime\"] = 22] = \"Runtime\";\n    BaseDirectory[BaseDirectory[\"Template\"] = 23] = \"Template\";\n})(BaseDirectory || (BaseDirectory = {}));\n/**\n * Returns the path to the suggested directory for your app's config files.\n * Resolves to `${configDir}/${bundleIdentifier}`, where `bundleIdentifier` is the [`identifier`](https://v2.tauri.app/reference/config/#identifier) value configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appConfigDir } from '@tauri-apps/api/path';\n * const appConfigDirPath = await appConfigDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appConfigDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.AppConfig\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's data files.\n * Resolves to `${dataDir}/${bundleIdentifier}`, where `bundleIdentifier` is the [`identifier`](https://v2.tauri.app/reference/config/#identifier) value configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appDataDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.AppData\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's local data files.\n * Resolves to `${localDataDir}/${bundleIdentifier}`, where `bundleIdentifier` is the [`identifier`](https://v2.tauri.app/reference/config/#identifier) value configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appLocalDataDir } from '@tauri-apps/api/path';\n * const appLocalDataDirPath = await appLocalDataDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appLocalDataDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.AppLocalData\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's cache files.\n * Resolves to `${cacheDir}/${bundleIdentifier}`, where `bundleIdentifier` is the [`identifier`](https://v2.tauri.app/reference/config/#identifier) value configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appCacheDir } from '@tauri-apps/api/path';\n * const appCacheDirPath = await appCacheDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appCacheDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.AppCache\n    });\n}\n/**\n * Returns the path to the user's audio directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_MUSIC_DIR`.\n * - **macOS:** Resolves to `$HOME/Music`.\n * - **Windows:** Resolves to `{FOLDERID_Music}`.\n * @example\n * ```typescript\n * import { audioDir } from '@tauri-apps/api/path';\n * const audioDirPath = await audioDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function audioDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Audio\n    });\n}\n/**\n * Returns the path to the user's cache directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_CACHE_HOME` or `$HOME/.cache`.\n * - **macOS:** Resolves to `$HOME/Library/Caches`.\n * - **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\n * @example\n * ```typescript\n * import { cacheDir } from '@tauri-apps/api/path';\n * const cacheDirPath = await cacheDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function cacheDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Cache\n    });\n}\n/**\n * Returns the path to the user's config directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_CONFIG_HOME` or `$HOME/.config`.\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\n * - **Windows:** Resolves to `{FOLDERID_RoamingAppData}`.\n * @example\n * ```typescript\n * import { configDir } from '@tauri-apps/api/path';\n * const configDirPath = await configDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function configDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Config\n    });\n}\n/**\n * Returns the path to the user's data directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_DATA_HOME` or `$HOME/.local/share`.\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\n * - **Windows:** Resolves to `{FOLDERID_RoamingAppData}`.\n * @example\n * ```typescript\n * import { dataDir } from '@tauri-apps/api/path';\n * const dataDirPath = await dataDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function dataDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Data\n    });\n}\n/**\n * Returns the path to the user's desktop directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DESKTOP_DIR`.\n * - **macOS:** Resolves to `$HOME/Desktop`.\n * - **Windows:** Resolves to `{FOLDERID_Desktop}`.\n * @example\n * ```typescript\n * import { desktopDir } from '@tauri-apps/api/path';\n * const desktopPath = await desktopDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function desktopDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Desktop\n    });\n}\n/**\n * Returns the path to the user's document directory.\n * @example\n * ```typescript\n * import { documentDir } from '@tauri-apps/api/path';\n * const documentDirPath = await documentDir();\n * ```\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DOCUMENTS_DIR`.\n * - **macOS:** Resolves to `$HOME/Documents`.\n * - **Windows:** Resolves to `{FOLDERID_Documents}`.\n *\n * @since 1.0.0\n */\nasync function documentDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Document\n    });\n}\n/**\n * Returns the path to the user's download directory.\n *\n * #### Platform-specific\n *\n * - **Linux**: Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DOWNLOAD_DIR`.\n * - **macOS**: Resolves to `$HOME/Downloads`.\n * - **Windows**: Resolves to `{FOLDERID_Downloads}`.\n * @example\n * ```typescript\n * import { downloadDir } from '@tauri-apps/api/path';\n * const downloadDirPath = await downloadDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function downloadDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Download\n    });\n}\n/**\n * Returns the path to the user's executable directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_BIN_HOME/../bin` or `$XDG_DATA_HOME/../bin` or `$HOME/.local/bin`.\n * - **macOS:** Not supported.\n * - **Windows:** Not supported.\n * @example\n * ```typescript\n * import { executableDir } from '@tauri-apps/api/path';\n * const executableDirPath = await executableDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function executableDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Executable\n    });\n}\n/**\n * Returns the path to the user's font directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_DATA_HOME/fonts` or `$HOME/.local/share/fonts`.\n * - **macOS:** Resolves to `$HOME/Library/Fonts`.\n * - **Windows:** Not supported.\n * @example\n * ```typescript\n * import { fontDir } from '@tauri-apps/api/path';\n * const fontDirPath = await fontDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function fontDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Font\n    });\n}\n/**\n * Returns the path to the user's home directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$HOME`.\n * - **macOS:** Resolves to `$HOME`.\n * - **Windows:** Resolves to `{FOLDERID_Profile}`.\n * @example\n * ```typescript\n * import { homeDir } from '@tauri-apps/api/path';\n * const homeDirPath = await homeDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function homeDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Home\n    });\n}\n/**\n * Returns the path to the user's local data directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_DATA_HOME` or `$HOME/.local/share`.\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\n * - **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\n * @example\n * ```typescript\n * import { localDataDir } from '@tauri-apps/api/path';\n * const localDataDirPath = await localDataDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function localDataDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.LocalData\n    });\n}\n/**\n * Returns the path to the user's picture directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_PICTURES_DIR`.\n * - **macOS:** Resolves to `$HOME/Pictures`.\n * - **Windows:** Resolves to `{FOLDERID_Pictures}`.\n * @example\n * ```typescript\n * import { pictureDir } from '@tauri-apps/api/path';\n * const pictureDirPath = await pictureDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function pictureDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Picture\n    });\n}\n/**\n * Returns the path to the user's public directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_PUBLICSHARE_DIR`.\n * - **macOS:** Resolves to `$HOME/Public`.\n * - **Windows:** Resolves to `{FOLDERID_Public}`.\n * @example\n * ```typescript\n * import { publicDir } from '@tauri-apps/api/path';\n * const publicDirPath = await publicDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function publicDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Public\n    });\n}\n/**\n * Returns the path to the application's resource directory.\n * To resolve a resource path, see the [[resolveResource | `resolveResource API`]].\n * @example\n * ```typescript\n * import { resourceDir } from '@tauri-apps/api/path';\n * const resourceDirPath = await resourceDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function resourceDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Resource\n    });\n}\n/**\n * Resolve the path to a resource file.\n * @example\n * ```typescript\n * import { resolveResource } from '@tauri-apps/api/path';\n * const resourcePath = await resolveResource('script.sh');\n * ```\n *\n * @param resourcePath The path to the resource.\n * Must follow the same syntax as defined in `tauri.conf.json > bundle > resources`, i.e. keeping subfolders and parent dir components (`../`).\n * @returns The full path to the resource.\n *\n * @since 1.0.0\n */\nasync function resolveResource(resourcePath) {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Resource,\n        path: resourcePath\n    });\n}\n/**\n * Returns the path to the user's runtime directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_RUNTIME_DIR`.\n * - **macOS:** Not supported.\n * - **Windows:** Not supported.\n * @example\n * ```typescript\n * import { runtimeDir } from '@tauri-apps/api/path';\n * const runtimeDirPath = await runtimeDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function runtimeDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Runtime\n    });\n}\n/**\n * Returns the path to the user's template directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_TEMPLATES_DIR`.\n * - **macOS:** Not supported.\n * - **Windows:** Resolves to `{FOLDERID_Templates}`.\n * @example\n * ```typescript\n * import { templateDir } from '@tauri-apps/api/path';\n * const templateDirPath = await templateDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function templateDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Template\n    });\n}\n/**\n * Returns the path to the user's video directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_VIDEOS_DIR`.\n * - **macOS:** Resolves to `$HOME/Movies`.\n * - **Windows:** Resolves to `{FOLDERID_Videos}`.\n * @example\n * ```typescript\n * import { videoDir } from '@tauri-apps/api/path';\n * const videoDirPath = await videoDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function videoDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Video\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's log files.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `${configDir}/${bundleIdentifier}/logs`.\n * - **macOS:** Resolves to `${homeDir}/Library/Logs/{bundleIdentifier}`\n * - **Windows:** Resolves to `${configDir}/${bundleIdentifier}/logs`.\n * @example\n * ```typescript\n * import { appLogDir } from '@tauri-apps/api/path';\n * const appLogDirPath = await appLogDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appLogDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.AppLog\n    });\n}\n/**\n * Returns a temporary directory.\n * @example\n * ```typescript\n * import { tempDir } from '@tauri-apps/api/path';\n * const temp = await tempDir();\n * ```\n *\n * @since 2.0.0\n */\nasync function tempDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Temp\n    });\n}\n/**\n * Returns the platform-specific path segment separator:\n * - `\\` on Windows\n * - `/` on POSIX\n *\n * @since 2.0.0\n */\nfunction sep() {\n    return window.__TAURI_INTERNALS__.plugins.path.sep;\n}\n/**\n * Returns the platform-specific path segment delimiter:\n * - `;` on Windows\n * - `:` on POSIX\n *\n * @since 2.0.0\n */\nfunction delimiter() {\n    return window.__TAURI_INTERNALS__.plugins.path.delimiter;\n}\n/**\n * Resolves a sequence of `paths` or `path` segments into an absolute path.\n * @example\n * ```typescript\n * import { resolve, appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * const path = await resolve(appDataDirPath, '..', 'users', 'tauri', 'avatar.png');\n * ```\n *\n * @since 1.0.0\n */\nasync function resolve(...paths) {\n    return invoke('plugin:path|resolve', { paths });\n}\n/**\n * Normalizes the given `path`, resolving `'..'` and `'.'` segments and resolve symbolic links.\n * @example\n * ```typescript\n * import { normalize, appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * const path = await normalize(`${appDataDirPath}/../users/tauri/avatar.png`);\n * ```\n *\n * @since 1.0.0\n */\nasync function normalize(path) {\n    return invoke('plugin:path|normalize', { path });\n}\n/**\n *  Joins all given `path` segments together using the platform-specific separator as a delimiter, then normalizes the resulting path.\n * @example\n * ```typescript\n * import { join, appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * const path = await join(appDataDirPath, 'users', 'tauri', 'avatar.png');\n * ```\n *\n * @since 1.0.0\n */\nasync function join(...paths) {\n    return invoke('plugin:path|join', { paths });\n}\n/**\n * Returns the directory name of a `path`. Trailing directory separators are ignored.\n * @example\n * ```typescript\n * import { dirname } from '@tauri-apps/api/path';\n * const dir = await dirname('/path/to/somedir/');\n * assert(dir === 'somedir');\n * ```\n *\n * @since 1.0.0\n */\nasync function dirname(path) {\n    return invoke('plugin:path|dirname', { path });\n}\n/**\n * Returns the extension of the `path`.\n * @example\n * ```typescript\n * import { extname } from '@tauri-apps/api/path';\n * const ext = await extname('/path/to/file.html');\n * assert(ext === 'html');\n * ```\n *\n * @since 1.0.0\n */\nasync function extname(path) {\n    return invoke('plugin:path|extname', { path });\n}\n/**\n * Returns the last portion of a `path`. Trailing directory separators are ignored.\n * @example\n * ```typescript\n * import { basename } from '@tauri-apps/api/path';\n * const base = await basename('path/to/app.conf');\n * assert(base === 'app.conf');\n * ```\n * @param ext An optional file extension to be removed from the returned path.\n *\n * @since 1.0.0\n */\nasync function basename(path, ext) {\n    return invoke('plugin:path|basename', { path, ext });\n}\n/**\n * Returns whether the path is absolute or not.\n * @example\n * ```typescript\n * import { isAbsolute } from '@tauri-apps/api/path';\n * assert(await isAbsolute('/home/tauri'));\n * ```\n *\n * @since 1.0.0\n */\nasync function isAbsolute(path) {\n    return invoke('plugin:path|is_absolute', { path });\n}\n\nexport { BaseDirectory, appCacheDir, appConfigDir, appDataDir, appLocalDataDir, appLogDir, audioDir, basename, cacheDir, configDir, dataDir, delimiter, desktopDir, dirname, documentDir, downloadDir, executableDir, extname, fontDir, homeDir, isAbsolute, join, localDataDir, normalize, pictureDir, publicDir, resolve, resolveResource, resourceDir, runtimeDir, sep, tempDir, templateDir, videoDir };\n", "import { Resource, invoke, Channel } from './core.js';\nimport { transformImage } from './image.js';\nimport { PhysicalPosition, PhysicalSize } from './dpi.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Tray icon class and associated methods. This type constructor is private,\n * instead, you should use the static method {@linkcode TrayIcon.new}.\n *\n * #### Warning\n *\n * Unlike Rust, javascript does not have any way to run cleanup code\n * when an object is being removed by garbage collection, but this tray icon\n * will be cleaned up when the tauri app exists, however if you want to cleanup\n * this object early, you need to call {@linkcode TrayIcon.close}.\n *\n * @example\n * ```ts\n * import { TrayIcon } from '@tauri-apps/api/tray';\n * const tray = await TrayIcon.new({ tooltip: 'awesome tray tooltip' });\n * tray.set_tooltip('new tooltip');\n * ```\n */\nclass TrayIcon extends Resource {\n    constructor(rid, id) {\n        super(rid);\n        this.id = id;\n    }\n    /** Gets a tray icon using the provided id. */\n    static async getById(id) {\n        return invoke('plugin:tray|get_by_id', { id }).then((rid) => rid ? new TrayIcon(rid, id) : null);\n    }\n    /**\n     * Removes a tray icon using the provided id from tauri's internal state.\n     *\n     * Note that this may cause the tray icon to disappear\n     * if it wasn't cloned somewhere else or referenced by JS.\n     */\n    static async removeById(id) {\n        return invoke('plugin:tray|remove_by_id', { id });\n    }\n    /**\n     * Creates a new {@linkcode TrayIcon}\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux:** Sometimes the icon won't be visible unless a menu is set.\n     * Setting an empty {@linkcode Menu} is enough.\n     */\n    static async new(options) {\n        if (options === null || options === void 0 ? void 0 : options.menu) {\n            // @ts-expect-error we only need the rid and kind\n            options.menu = [options.menu.rid, options.menu.kind];\n        }\n        if (options === null || options === void 0 ? void 0 : options.icon) {\n            options.icon = transformImage(options.icon);\n        }\n        const handler = new Channel();\n        if (options === null || options === void 0 ? void 0 : options.action) {\n            const action = options.action;\n            handler.onmessage = (e) => action(mapEvent(e));\n            delete options.action;\n        }\n        return invoke('plugin:tray|new', {\n            options: options !== null && options !== void 0 ? options : {},\n            handler\n        }).then(([rid, id]) => new TrayIcon(rid, id));\n    }\n    /**\n     *  Sets a new tray icon. If `null` is provided, it will remove the icon.\n     *\n     * Note that you may need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     */\n    async setIcon(icon) {\n        let trayIcon = null;\n        if (icon) {\n            trayIcon = transformImage(icon);\n        }\n        return invoke('plugin:tray|set_icon', { rid: this.rid, icon: trayIcon });\n    }\n    /**\n     * Sets a new tray menu.\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux**: once a menu is set it cannot be removed so `null` has no effect\n     */\n    async setMenu(menu) {\n        if (menu) {\n            // @ts-expect-error we only need the rid and kind\n            menu = [menu.rid, menu.kind];\n        }\n        return invoke('plugin:tray|set_menu', { rid: this.rid, menu });\n    }\n    /**\n     * Sets the tooltip for this tray icon.\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux:** Unsupported\n     */\n    async setTooltip(tooltip) {\n        return invoke('plugin:tray|set_tooltip', { rid: this.rid, tooltip });\n    }\n    /**\n     * Sets the tooltip for this tray icon.\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux:** The title will not be shown unless there is an icon\n     * as well.  The title is useful for numerical and other frequently\n     * updated information.  In general, it shouldn't be shown unless a\n     * user requests it as it can take up a significant amount of space\n     * on the user's panel.  This may not be shown in all visualizations.\n     * - **Windows:** Unsupported\n     */\n    async setTitle(title) {\n        return invoke('plugin:tray|set_title', { rid: this.rid, title });\n    }\n    /** Show or hide this tray icon. */\n    async setVisible(visible) {\n        return invoke('plugin:tray|set_visible', { rid: this.rid, visible });\n    }\n    /**\n     * Sets the tray icon temp dir path. **Linux only**.\n     *\n     * On Linux, we need to write the icon to the disk and usually it will\n     * be `$XDG_RUNTIME_DIR/tray-icon` or `$TEMP/tray-icon`.\n     */\n    async setTempDirPath(path) {\n        return invoke('plugin:tray|set_temp_dir_path', { rid: this.rid, path });\n    }\n    /** Sets the current icon as a [template](https://developer.apple.com/documentation/appkit/nsimage/1520017-template?language=objc). **macOS only** */\n    async setIconAsTemplate(asTemplate) {\n        return invoke('plugin:tray|set_icon_as_template', {\n            rid: this.rid,\n            asTemplate\n        });\n    }\n    /**\n     *  Disable or enable showing the tray menu on left click.\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux**: Unsupported.\n     *\n     * @deprecated use {@linkcode TrayIcon.setShowMenuOnLeftClick} instead.\n     */\n    async setMenuOnLeftClick(onLeft) {\n        return invoke('plugin:tray|set_show_menu_on_left_click', {\n            rid: this.rid,\n            onLeft\n        });\n    }\n    /**\n     *  Disable or enable showing the tray menu on left click.\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux**: Unsupported.\n     *\n     * @since 2.2.0\n     */\n    async setShowMenuOnLeftClick(onLeft) {\n        return invoke('plugin:tray|set_show_menu_on_left_click', {\n            rid: this.rid,\n            onLeft\n        });\n    }\n}\nfunction mapEvent(e) {\n    const out = e;\n    out.position = new PhysicalPosition(e.position);\n    out.rect.position = new PhysicalPosition(e.rect.position);\n    out.rect.size = new PhysicalSize(e.rect.size);\n    return out;\n}\n\nexport { TrayIcon };\n"],
  "mappings": "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",
  "names": ["BaseDirectory"]
}
